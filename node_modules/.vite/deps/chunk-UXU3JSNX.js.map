{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useSafeState.js"],
  "sourcesContent": ["import { useCallback } from 'react';\r\nimport useMounted from './useMounted';\r\n\r\n/**\r\n * `useSafeState` takes the return value of a `useState` hook and wraps the\r\n * setter to prevent updates onces the component has unmounted. Can used\r\n * with `useMergeState` and `useStateAsync` as well\r\n *\r\n * @param state The return value of a useStateHook\r\n *\r\n * ```ts\r\n * const [show, setShow] = useSafeState(useState(true));\r\n * ```\r\n */\r\n\r\nfunction useSafeState(state) {\r\n  const isMounted = useMounted();\r\n  return [state[0], useCallback(nextState => {\r\n    if (!isMounted()) return;\r\n    return state[1](nextState);\r\n  }, [isMounted, state[1]])];\r\n}\r\nexport default useSafeState;"],
  "mappings": ";;;;;;;;;;;AAAA,mBAA4B;AAe5B,SAAS,aAAa,OAAO;AAC3B,QAAM,YAAY,WAAW;AAC7B,SAAO,CAAC,MAAM,CAAC,OAAG,0BAAY,eAAa;AACzC,QAAI,CAAC,UAAU;AAAG;AAClB,WAAO,MAAM,CAAC,EAAE,SAAS;AAAA,EAC3B,GAAG,CAAC,WAAW,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA,IAAO,uBAAQ;",
  "names": []
}
