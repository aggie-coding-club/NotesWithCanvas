{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useForceUpdate.js", "../../@restart/hooks/esm/useCallbackRef.js", "../../@restart/hooks/esm/useEventListener.js", "../../@restart/hooks/esm/useGlobalListener.js"],
  "sourcesContent": ["import { useReducer } from 'react';\r\n\r\n/**\r\n * Returns a function that triggers a component update. the hook equivalent to\r\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\r\n * is preferable but may be required in some advanced usages of refs for interop or\r\n * when direct DOM manipulation is required.\r\n *\r\n * ```ts\r\n * const forceUpdate = useForceUpdate();\r\n *\r\n * const updateOnClick = useCallback(() => {\r\n *  forceUpdate()\r\n * }, [forceUpdate])\r\n *\r\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\r\n * ```\r\n */\r\nexport default function useForceUpdate() {\r\n  // The toggling state value is designed to defeat React optimizations for skipping\r\n  // updates when they are strictly equal to the last state value\r\n  const [, dispatch] = useReducer(state => !state, false);\r\n  return dispatch;\r\n}", "import { useState } from 'react';\r\n\r\n/**\r\n * A convenience hook around `useState` designed to be paired with\r\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\r\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\r\n * instead of lazily accessing it in an effect.\r\n *\r\n * ```ts\r\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\r\n *\r\n * useEffect(() => {\r\n *   if (!element) return\r\n *\r\n *   const calendar = new FullCalendar.Calendar(element)\r\n *\r\n *   return () => {\r\n *     calendar.destroy()\r\n *   }\r\n * }, [element])\r\n *\r\n * return <div ref={attachRef} />\r\n * ```\r\n *\r\n * @category refs\r\n */\r\nexport default function useCallbackRef() {\r\n  return useState(null);\r\n}", "import { useEffect } from 'react';\r\nimport useEventCallback from './useEventCallback';\r\n/**\r\n * Attaches an event handler outside directly to specified DOM element\r\n * bypassing the react synthetic event system.\r\n *\r\n * @param element The target to listen for events on\r\n * @param event The DOM event name\r\n * @param handler An event handler\r\n * @param capture Whether or not to listen during the capture event phase\r\n */\r\nexport default function useEventListener(eventTarget, event, listener, capture = false) {\r\n  const handler = useEventCallback(listener);\r\n  useEffect(() => {\r\n    const target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\r\n    target.addEventListener(event, handler, capture);\r\n    return () => target.removeEventListener(event, handler, capture);\r\n  }, [eventTarget]);\r\n}", "import useEventListener from './useEventListener';\r\nimport { useCallback } from 'react';\r\n/**\r\n * Attaches an event handler outside directly to the `document`,\r\n * bypassing the react synthetic event system.\r\n *\r\n * ```ts\r\n * useGlobalListener('keydown', (event) => {\r\n *  console.log(event.key)\r\n * })\r\n * ```\r\n *\r\n * @param event The DOM event name\r\n * @param handler An event handler\r\n * @param capture Whether or not to listen during the capture event phase\r\n */\r\nexport default function useGlobalListener(event, handler, capture = false) {\r\n  const documentTarget = useCallback(() => document, []);\r\n  return useEventListener(documentTarget, event, handler, capture);\r\n}"],
  "mappings": ";;;;;;;;;;;AAAA,mBAA2B;AAkBZ,SAAR,iBAAkC;AAGvC,QAAM,CAAC,EAAE,QAAQ,QAAI,yBAAW,WAAS,CAAC,OAAO,KAAK;AACtD,SAAO;AACT;;;ACvBA,IAAAA,gBAAyB;AA0BV,SAAR,iBAAkC;AACvC,aAAO,wBAAS,IAAI;AACtB;;;AC5BA,IAAAC,gBAA0B;AAWX,SAAR,iBAAkC,aAAa,OAAO,UAAU,UAAU,OAAO;AACtF,QAAM,UAAU,iBAAiB,QAAQ;AACzC,+BAAU,MAAM;AACd,UAAM,SAAS,OAAO,gBAAgB,aAAa,YAAY,IAAI;AACnE,WAAO,iBAAiB,OAAO,SAAS,OAAO;AAC/C,WAAO,MAAM,OAAO,oBAAoB,OAAO,SAAS,OAAO;AAAA,EACjE,GAAG,CAAC,WAAW,CAAC;AAClB;;;ACjBA,IAAAC,gBAA4B;AAeb,SAAR,kBAAmC,OAAO,SAAS,UAAU,OAAO;AACzE,QAAM,qBAAiB,2BAAY,MAAM,UAAU,CAAC,CAAC;AACrD,SAAO,iBAAiB,gBAAgB,OAAO,SAAS,OAAO;AACjE;",
  "names": ["import_react", "import_react", "import_react"]
}
