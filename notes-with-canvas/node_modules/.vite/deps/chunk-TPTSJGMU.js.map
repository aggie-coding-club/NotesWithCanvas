{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useSafeState.js"],
  "sourcesContent": ["import { useCallback } from 'react';\nimport useMounted from './useMounted';\n\n/**\n * `useSafeState` takes the return value of a `useState` hook and wraps the\n * setter to prevent updates onces the component has unmounted. Can used\n * with `useMergeState` and `useStateAsync` as well\n *\n * @param state The return value of a useStateHook\n *\n * ```ts\n * const [show, setShow] = useSafeState(useState(true));\n * ```\n */\n\nfunction useSafeState(state) {\n  const isMounted = useMounted();\n  return [state[0], useCallback(nextState => {\n    if (!isMounted()) return;\n    return state[1](nextState);\n  }, [isMounted, state[1]])];\n}\nexport default useSafeState;"],
  "mappings": ";;;;;;;;;;;AAAA,mBAA4B;AAe5B,SAAS,aAAa,OAAO;AAC3B,QAAM,YAAY,WAAW;AAC7B,SAAO,CAAC,MAAM,CAAC,OAAG,0BAAY,eAAa;AACzC,QAAI,CAAC,UAAU;AAAG;AAClB,WAAO,MAAM,CAAC,EAAE,SAAS;AAAA,EAC3B,GAAG,CAAC,WAAW,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA,IAAO,uBAAQ;",
  "names": []
}
